import{_ as e,c as i,o,a}from"./app-CmTphZ6b.js";const l={},n=a('<h1 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h1><p>MVVM（Model-View-ViewModel）是一种设计思想，主要用于简化用户界面的编程。它分为三部分：</p><h2 id="model-模型" tabindex="-1"><a class="header-anchor" href="#model-模型"><span><strong>Model（模型）</strong></span></a></h2><p>负责定义数据结构，以及处理应用的业务逻辑。例如，如果你正在编写一个购物应用，你可能会有一个购物车模型，它包含了商品列表和计算总价的逻辑。</p><h2 id="view-视图" tabindex="-1"><a class="header-anchor" href="#view-视图"><span><strong>View（视图）</strong></span></a></h2><p>负责显示用户界面。在 MVVM 中，视图是被动的，它不包含任何业务逻辑，只负责显示由 ViewModel 提供的数据和状态。</p><h2 id="viewmodel-视图模型" tabindex="-1"><a class="header-anchor" href="#viewmodel-视图模型"><span><strong>ViewModel（视图模型）</strong></span></a></h2><p>是 Model 和 View 的桥梁。它负责将 Model 的数据转换为 View 可以显示的数据，同时也负责处理用户的交互（例如点击按钮）并更新 Model。在 MVVM 中，ViewModel 和 View 之间通常会有数据绑定，这意味着当 ViewModel 的数据改变时，View 会自动更新；反之，当 View 的状态改变（例如用户输入文本）时，ViewModel 也会自动更新。</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>MVVM 的主要优点是它可以降低 View 的复杂性，使得 View 可以专注于定义用户界面的结构和外观，而不需要处理业务逻辑。这使得代码更易于理解和维护。MVVM 也更容易进行单元测试，因为你可以独立于视图测试 ViewModel。</p>',10),t=[n];function d(s,V){return o(),i("div",null,t)}const M=e(l,[["render",d],["__file","MVVM.html.vue"]]),h=JSON.parse('{"path":"/posts/vue/MVVM.html","title":"MVVM","lang":"zh-CN","frontmatter":{"date":"2024-06-03T00:00:00.000Z","category":["Vue"],"tag":["Vue","MVVM"],"description":"介绍MVVM的设计思想与其优点。"},"headers":[{"level":2,"title":"Model（模型）","slug":"model-模型","link":"#model-模型","children":[]},{"level":2,"title":"View（视图）","slug":"view-视图","link":"#view-视图","children":[]},{"level":2,"title":"ViewModel（视图模型）","slug":"viewmodel-视图模型","link":"#viewmodel-视图模型","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]}],"git":{"updatedTime":1717484384000,"contributors":[{"name":"brand-new-remo","email":"gangqiang.duan@foxmail.com","commits":1}]},"filePathRelative":"posts/vue/MVVM.md","excerpt":"\\n<p>MVVM（Model-View-ViewModel）是一种设计思想，主要用于简化用户界面的编程。它分为三部分：</p>\\n<h2><strong>Model（模型）</strong></h2>\\n<p>负责定义数据结构，以及处理应用的业务逻辑。例如，如果你正在编写一个购物应用，你可能会有一个购物车模型，它包含了商品列表和计算总价的逻辑。</p>\\n<h2><strong>View（视图）</strong></h2>\\n<p>负责显示用户界面。在 MVVM 中，视图是被动的，它不包含任何业务逻辑，只负责显示由 ViewModel 提供的数据和状态。</p>\\n<h2><strong>ViewModel（视图模型）</strong></h2>"}');export{M as comp,h as data};
