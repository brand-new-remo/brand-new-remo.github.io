import{_ as n,c as s,o as t,a}from"./app-B7NYTa9K.js";const o={},e=a(`<h1 id="xss" tabindex="-1"><a class="header-anchor" href="#xss"><span>XSS</span></a></h1><p>XSS（Cross-Site Scripting）攻击主要有三种类型：反射型 XSS、存储型 XSS 和 DOM 型 XSS。</p><ol><li><p><strong>反射型 XSS</strong>：攻击者将恶意脚本作为 URL 的一部分，当用户点击这个 URL 时，服务器将恶意脚本插入到返回的网页中。</p><p><strong>例子</strong>：假设有一个搜索网站，用户可以在 URL 中输入搜索关键字，例如 <code>http://www.example.com/search?keyword=JavaScript</code>。如果攻击者将恶意脚本作为关键字，例如 <code>http://www.example.com/search?keyword=&lt;script&gt;evilScript()&lt;/script&gt;</code>，那么恶意脚本就会被插入到返回的网页中，当其他用户点击这个 URL 时，恶意脚本就会被执行。</p><p><strong>防御措施</strong>：对所有用户输入进行适当的处理，包括验证、过滤和转义。例如，可以使用 HTML 实体编码来转义特殊字符。</p></li><li><p><strong>存储型 XSS</strong>：攻击者将恶意脚本提交到网站的数据库中，当其他用户浏览相关内容时，恶意脚本会被插入到返回的网页中。</p><p><strong>例子</strong>：假设一个社交网站允许用户发布评论。如果攻击者在评论中插入恶意脚本，例如 <code>&lt;script&gt;evilScript()&lt;/script&gt;</code>，那么这个脚本就会被存储在数据库中。当其他用户查看这个评论时，恶意脚本就会被插入到返回的网页中，从而被执行。</p><p><strong>防御措施</strong>：除了对用户输入进行验证、过滤和转义外，还可以使用内容安全策略（CSP）来限制网页中脚本的来源和行为。</p></li><li><p><strong>DOM 型 XSS</strong>：攻击者利用网页的 DOM 脚本逻辑，将恶意脚本插入到网页中。</p><p><strong>例子</strong>：假设一个网站使用 JavaScript 从 URL 中获取参数，并将其插入到网页中，例如 <code>document.getElementById(&#39;content&#39;).innerHTML = location.hash.substring(1)</code>。如果攻击者将恶意脚本作为 URL 的一部分，例如 <code>http://www.example.com/#&lt;img src=&#39;x&#39; onerror=&#39;evilScript()&#39;&gt;</code>，那么恶意脚本就会被插入到网页中，从而被执行。</p><p><strong>防御措施</strong>：除了对用户输入进行验证、过滤和转义外，还需要确保网页的 DOM 脚本逻辑不会导致安全问题。例如，可以使用 <code>textContent</code> 而不是 <code>innerHTML</code>，或者使用安全的库和函数来操作 DOM。防止 XSS 攻击主要有以下几个步骤：</p><ol><li><strong>对用户输入进行过滤和转义</strong>：你可以使用一些库，如 DOMPurify，来自动清理用户输入，移除可能导致 XSS 攻击的部分。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> DOMPurify <span class="token keyword">from</span> <span class="token string">&#39;dompurify&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userInput <span class="token operator">=</span> <span class="token string">&#39;&lt;script&gt;alert(&quot;XSS Attack&quot;);&lt;/script&gt;&#39;</span></span>
<span class="line"><span class="token keyword">const</span> cleanInput <span class="token operator">=</span> DOMPurify<span class="token punctuation">.</span><span class="token function">sanitize</span><span class="token punctuation">(</span>userInput<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>使用 CSP（内容安全策略）</strong>：CSP 可以限制浏览器加载和执行来自特定来源的资源，从而防止 XSS 攻击。你可以在 HTTP 响应头中设置 CSP，或者在 HTML 中使用 <code>&lt;meta&gt;</code> 标签设置。</li></ol><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span></span>
<span class="line">  <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>使用 HTTPOnly Cookies</strong>：将敏感数据（如 session tokens）存储在 HTTPOnly Cookies 中，可以防止脚本访问这些数据。</li><li><strong>使用 HTTPS</strong>：HTTPS 可以防止数据在传输过程中被拦截和修改，从而防止 XSS 攻击。</li><li><strong>对用户输入进行验证</strong>：对用户输入进行严格的验证，只接受预期的输入，可以防止 XSS 攻击。</li></ol><p><strong>富文本编辑器防止XSS攻击：</strong></p><ol><li><strong>输入验证</strong>：尽可能地限制用户输入的类型和格式。例如，如果你知道某个输入应该是数字，那么就只接受数字。</li><li><strong>输出编码</strong>：在将用户输入的数据插入到 HTML 中时，需要对特殊字符进行编码。例如，你可以将 <code>&lt;</code> 替换为 <code>&amp;lt;</code>，将 <code>&gt;</code> 替换为 <code>&amp;gt;</code>，将 <code>&quot;</code> 替换为 <code>&amp;quot;</code>，将 <code>&#39;</code> 替换为 <code>&amp;#x27;</code>，将 <code>/</code> 替换为 <code>&amp;#x2F;</code>。这样，即使用户输入的数据包含有恶意的 JavaScript 代码，这些代码也不会被浏览器执行。</li><li><strong>使用 HTTP Only Cookies</strong>：将敏感的 Cookies 设置为 HTTP Only，这样 JavaScript 就无法访问这些 Cookies，从而防止了窃取 Cookies 的 XSS 攻击。</li><li><strong>使用 Content Security Policy (CSP)</strong>：CSP 是一种安全策略，它可以限制浏览器只加载和执行来自特定来源的脚本。这样，即使页面中包含有恶意的脚本，这些脚本也无法被执行。</li><li><strong>使用安全的富文本编辑器</strong>：许多富文本编辑器，如 CKEditor 和 TinyMCE，都提供了防止 XSS 攻击的功能。它们会对用户输入的数据进行清理和过滤，移除所有可能导致 XSS 攻击的内容。</li><li><strong>使用安全的代码高亮库</strong>：如果你的论坛支持代码编辑，那么你可能会使用一些代码高亮库，如 highlight.js 或 Prism。这些库通常都会对输入的代码进行安全处理，防止 XSS 攻击。</li></ol></li></ol>`,3),l=[e];function p(c,i){return t(),s("div",null,l)}const d=n(o,[["render",p],["__file","XSS.html.vue"]]),g=JSON.parse(`{"path":"/posts/security/XSS.html","title":"XSS","lang":"zh-CN","frontmatter":{"date":"2024-06-03T00:00:00.000Z","category":["安全"],"tag":["XSS","CSP","dompurify"]},"headers":[],"git":{"updatedTime":1717405929000,"contributors":[{"name":"gangqiang duan","email":"duangangqiang@users.noreply.github.com","commits":2}]},"filePathRelative":"posts/security/XSS.md","excerpt":"\\n<p>XSS（Cross-Site Scripting）攻击主要有三种类型：反射型 XSS、存储型 XSS 和 DOM 型 XSS。</p>\\n<ol>\\n<li>\\n<p><strong>反射型 XSS</strong>：攻击者将恶意脚本作为 URL 的一部分，当用户点击这个 URL 时，服务器将恶意脚本插入到返回的网页中。</p>\\n<p><strong>例子</strong>：假设有一个搜索网站，用户可以在 URL 中输入搜索关键字，例如 <code>http://www.example.com/search?keyword=JavaScript</code>。如果攻击者将恶意脚本作为关键字，例如 <code>http://www.example.com/search?keyword=&lt;script&gt;evilScript()&lt;/script&gt;</code>，那么恶意脚本就会被插入到返回的网页中，当其他用户点击这个 URL 时，恶意脚本就会被执行。</p>\\n<p><strong>防御措施</strong>：对所有用户输入进行适当的处理，包括验证、过滤和转义。例如，可以使用 HTML 实体编码来转义特殊字符。</p>\\n</li>\\n<li>\\n<p><strong>存储型 XSS</strong>：攻击者将恶意脚本提交到网站的数据库中，当其他用户浏览相关内容时，恶意脚本会被插入到返回的网页中。</p>\\n<p><strong>例子</strong>：假设一个社交网站允许用户发布评论。如果攻击者在评论中插入恶意脚本，例如 <code>&lt;script&gt;evilScript()&lt;/script&gt;</code>，那么这个脚本就会被存储在数据库中。当其他用户查看这个评论时，恶意脚本就会被插入到返回的网页中，从而被执行。</p>\\n<p><strong>防御措施</strong>：除了对用户输入进行验证、过滤和转义外，还可以使用内容安全策略（CSP）来限制网页中脚本的来源和行为。</p>\\n</li>\\n<li>\\n<p><strong>DOM 型 XSS</strong>：攻击者利用网页的 DOM 脚本逻辑，将恶意脚本插入到网页中。</p>\\n<p><strong>例子</strong>：假设一个网站使用 JavaScript 从 URL 中获取参数，并将其插入到网页中，例如 <code>document.getElementById('content').innerHTML = location.hash.substring(1)</code>。如果攻击者将恶意脚本作为 URL 的一部分，例如 <code>http://www.example.com/#&lt;img src='x' onerror='evilScript()'&gt;</code>，那么恶意脚本就会被插入到网页中，从而被执行。</p>\\n<p><strong>防御措施</strong>：除了对用户输入进行验证、过滤和转义外，还需要确保网页的 DOM 脚本逻辑不会导致安全问题。例如，可以使用 <code>textContent</code> 而不是 <code>innerHTML</code>，或者使用安全的库和函数来操作 DOM。防止 XSS 攻击主要有以下几个步骤：</p>\\n<ol>\\n<li><strong>对用户输入进行过滤和转义</strong>：你可以使用一些库，如 DOMPurify，来自动清理用户输入，移除可能导致 XSS 攻击的部分。</li>\\n</ol>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">import</span> DOMPurify <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'dompurify'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> userInput <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'&lt;script&gt;alert(\\"XSS Attack\\");&lt;/script&gt;'</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> cleanInput <span class=\\"token operator\\">=</span> DOMPurify<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sanitize</span><span class=\\"token punctuation\\">(</span>userInput<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div><ol>\\n<li><strong>使用 CSP（内容安全策略）</strong>：CSP 可以限制浏览器加载和执行来自特定来源的资源，从而防止 XSS 攻击。你可以在 HTTP 响应头中设置 CSP，或者在 HTML 中使用 <code>&lt;meta&gt;</code> 标签设置。</li>\\n</ol>\\n<div class=\\"language-html\\" data-highlighter=\\"prismjs\\" data-ext=\\"html\\" data-title=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"line\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>meta</span></span>\\n<span class=\\"line\\">  <span class=\\"token attr-name\\">http-equiv</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>Content-Security-Policy<span class=\\"token punctuation\\">\\"</span></span></span>\\n<span class=\\"line\\">  <span class=\\"token attr-name\\">content</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>default-src 'self'; script-src 'self'<span class=\\"token punctuation\\">\\"</span></span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">/&gt;</span></span></span>\\n<span class=\\"line\\"></span></code></pre></div><ol>\\n<li><strong>使用 HTTPOnly Cookies</strong>：将敏感数据（如 session tokens）存储在 HTTPOnly Cookies 中，可以防止脚本访问这些数据。</li>\\n<li><strong>使用 HTTPS</strong>：HTTPS 可以防止数据在传输过程中被拦截和修改，从而防止 XSS 攻击。</li>\\n<li><strong>对用户输入进行验证</strong>：对用户输入进行严格的验证，只接受预期的输入，可以防止 XSS 攻击。</li>\\n</ol>\\n<p><strong>富文本编辑器防止XSS攻击：</strong></p>\\n<ol>\\n<li><strong>输入验证</strong>：尽可能地限制用户输入的类型和格式。例如，如果你知道某个输入应该是数字，那么就只接受数字。</li>\\n<li><strong>输出编码</strong>：在将用户输入的数据插入到 HTML 中时，需要对特殊字符进行编码。例如，你可以将 <code>&lt;</code> 替换为 <code>&amp;lt;</code>，将 <code>&gt;</code> 替换为 <code>&amp;gt;</code>，将 <code>\\"</code> 替换为 <code>&amp;quot;</code>，将 <code>'</code> 替换为 <code>&amp;#x27;</code>，将 <code>/</code> 替换为 <code>&amp;#x2F;</code>。这样，即使用户输入的数据包含有恶意的 JavaScript 代码，这些代码也不会被浏览器执行。</li>\\n<li><strong>使用 HTTP Only Cookies</strong>：将敏感的 Cookies 设置为 HTTP Only，这样 JavaScript 就无法访问这些 Cookies，从而防止了窃取 Cookies 的 XSS 攻击。</li>\\n<li><strong>使用 Content Security Policy (CSP)</strong>：CSP 是一种安全策略，它可以限制浏览器只加载和执行来自特定来源的脚本。这样，即使页面中包含有恶意的脚本，这些脚本也无法被执行。</li>\\n<li><strong>使用安全的富文本编辑器</strong>：许多富文本编辑器，如 CKEditor 和 TinyMCE，都提供了防止 XSS 攻击的功能。它们会对用户输入的数据进行清理和过滤，移除所有可能导致 XSS 攻击的内容。</li>\\n<li><strong>使用安全的代码高亮库</strong>：如果你的论坛支持代码编辑，那么你可能会使用一些代码高亮库，如 highlight.js 或 Prism。这些库通常都会对输入的代码进行安全处理，防止 XSS 攻击。</li>\\n</ol>\\n</li>\\n</ol>"}`);export{d as comp,g as data};
