import{_ as e,c as o,o as d,a as i}from"./app-B7NYTa9K.js";const l={},V=i('<h1 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h1><p>MVVM（Model-View-ViewModel）是一种设计思想，主要用于简化用户界面的编程。它分为三部分：</p><ol><li><strong>Model（模型）</strong>：负责定义数据结构，以及处理应用的业务逻辑。例如，如果你正在编写一个购物应用，你可能会有一个购物车模型，它包含了商品列表和计算总价的逻辑。</li><li><strong>View（视图）</strong>：负责显示用户界面。在 MVVM 中，视图是被动的，它不包含任何业务逻辑，只负责显示由 ViewModel 提供的数据和状态。</li><li><strong>ViewModel（视图模型）</strong>：是 Model 和 View 的桥梁。它负责将 Model 的数据转换为 View 可以显示的数据，同时也负责处理用户的交互（例如点击按钮）并更新 Model。在 MVVM 中，ViewModel 和 View 之间通常会有数据绑定，这意味着当 ViewModel 的数据改变时，View 会自动更新；反之，当 View 的状态改变（例如用户输入文本）时，ViewModel 也会自动更新。</li></ol><p>MVVM 的主要优点是它可以降低 View 的复杂性，使得 View 可以专注于定义用户界面的结构和外观，而不需要处理业务逻辑。这使得代码更易于理解和维护。MVVM 也更容易进行单元测试，因为你可以独立于视图测试 ViewModel。</p><p><code>MVVM</code>的架构的优点有：</p><ul><li><code>低耦合</code>：视图（View）可以<code>独立于Model变化和修改</code>，<code>一个ViewModel</code>可以绑定到<code>不同的View上</code>，当<code>View变化</code>的时候<code>Model可以不变</code>，当<code>Model变化</code>的时候<code>View也可以不变</code>；</li><li><code>可复用</code>：可以将<code>一个ViewModule</code>的逻辑给<code>多个View</code>使用；</li><li><code>独立开发</code>：开发人员可以专注于<code>业务逻辑和数据的开发（ViewModel）</code>，设计人员可以专注于页面设计；</li><li><code>可测试</code>：因为<code>ViewModel</code>是独立于界面的，因此测试人员可以专注于<code>业务逻辑</code>，而无需依赖具体的页面实现；</li></ul>',6),c=[V];function M(t,n){return d(),o("div",null,c)}const s=e(l,[["render",M],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/posts/vue/","title":"MVVM","lang":"zh-CN","frontmatter":{"date":"2024-06-03T00:00:00.000Z","category":["Vue"],"tag":["Vue","MVVM"]},"headers":[],"git":{"updatedTime":1717470552000,"contributors":[{"name":"brand-new-remo","email":"gangqiang.duan@foxmail.com","commits":1}]},"filePathRelative":"posts/vue/index.md","excerpt":"\\n<p>MVVM（Model-View-ViewModel）是一种设计思想，主要用于简化用户界面的编程。它分为三部分：</p>\\n<ol>\\n<li><strong>Model（模型）</strong>：负责定义数据结构，以及处理应用的业务逻辑。例如，如果你正在编写一个购物应用，你可能会有一个购物车模型，它包含了商品列表和计算总价的逻辑。</li>\\n<li><strong>View（视图）</strong>：负责显示用户界面。在 MVVM 中，视图是被动的，它不包含任何业务逻辑，只负责显示由 ViewModel 提供的数据和状态。</li>\\n<li><strong>ViewModel（视图模型）</strong>：是 Model 和 View 的桥梁。它负责将 Model 的数据转换为 View 可以显示的数据，同时也负责处理用户的交互（例如点击按钮）并更新 Model。在 MVVM 中，ViewModel 和 View 之间通常会有数据绑定，这意味着当 ViewModel 的数据改变时，View 会自动更新；反之，当 View 的状态改变（例如用户输入文本）时，ViewModel 也会自动更新。</li>\\n</ol>"}');export{s as comp,w as data};
